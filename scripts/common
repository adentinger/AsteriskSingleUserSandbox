#!/bin/bash -e

# Save THIS_SCRIPT_DIR.
OLD_THIS_SCRIPT_DIR="${THIS_SCRIPT_DIR}"

THIS_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
GIT_ROOT_DIR="$(realpath "${THIS_SCRIPT_DIR}/..")"
SCRIPTS_DIR="${GIT_ROOT_DIR}/scripts"

ASTERISK_CONFIG_DIR="${GIT_ROOT_DIR}/asterisk"
ASTERISK_CONFIG_INSTALL_DIR=/etc/asterisk
ASTERISK_SPOOLDIR=/var/spool/asterisk
ASTERISK_DATA_DIR=/usr/share/asterisk

# Not sure how else to call this. This is not Asterisk's datadir ;
# it's just the directory where I keep data files (sounds, binaries, ...)
MY_DATA_FILES_DIR="${GIT_ROOT_DIR}/my-data"
DATA_DIR="${MY_DATA_FILES_DIR}/data"
SPOOL_DIR="${MY_DATA_FILES_DIR}/spool"
DATA_SOUNDS_DIR="${DATA_DIR}/sounds"
DATA_SOUNDS_INSTALL_DIR="${ASTERISK_DATA_DIR}/sounds"
MOH_DIR="${MY_DATA_FILES_DIR}/music-on-hold"
MOH_INSTALL_DIR=/usr/share/asterisk/moh
VOICEMAIL_SOUNDS_DIR="${SPOOL_DIR}/voicemail"
voicemailSoundsInstallDir() { echo "${ASTERISK_SPOOLDIR}/voicemail/default/${MAIN_EXTEN}"; }
AMI_CLIENT_DIR="${GIT_ROOT_DIR}/ami-client"
AMI_CLIENT_INSTALL_DIR="/etc/asterisk-config/ami-client"
AMI_CLIENT_SCRIPTS_DIR="${AMI_CLIENT_DIR}/scripts"
AMI_CLIENT_SCRIPTS_INSTALL_DIR="/var/lib/asterisk/sms"
SYSTEMD_DIR="${GIT_ROOT_DIR}/systemd"
SYSTEMD_UNITS_DIR="${SYSTEMD_DIR}/units"
SYSTEMD_UNITS_INSTALL_DIR=/etc/systemd/system

DOCKER_IMAGE_NAME=asterisk-home
CONTAINER_DIR="${GIT_ROOT_DIR}/container"
IMAGE_FILES_DIR="${CONTAINER_DIR}/files-to-add-to-image"

# Restore THIS_SCRIPT_DIR to what it was before.
THIS_SCRIPT_DIR="${OLD_THIS_SCRIPT_DIR}"

isTty() {
    local fd="${1}"
    [ -t "${fd}" ]
}

message() {
    if isTty 1; then
        echo -n -e '\e[1;92m'
        echo -n "$@"
        echo -n -e '\e[0m\n'
    else
        echo "$@"
    fi
}

messageError() {
    if isTty 2; then
        echo -n -e '\e[1;91m' >&2
        echo -n "$@" >&2
        echo -n -e '\e[0m\n' >&2
    else
        echo "$@" >&2
    fi
}

# EXPECTED PARAMS:
#
# 1 : The actual number of arguments
# 2 : The minimum number of arguments expected
# 3 : The maximum number of arguments expected
# OR
# 1 : The actual number of arguments
# 2 : The exact number of arguments expected
#
# RETURN CODE:
# Nonzero if expected != actual ; otherwise 0
checkParamNum() {
    local actual="${1}"
    local min="${2}"
    if [ $# -ge 3 ]; then
        local max="${3}"
    else
        local max="${min}"
    fi
    if [ "${actual}" -lt "${min}" ] || [ "${actual}" -gt "${max}" ]; then
        messageError "${FUNCNAME[1]} : Got ${actual} params ; expected $([ "${min}" == "${max}" ] && echo "${min}" || echo "between ${min} and ${max}")."
    fi
}

assertRoot() {
    if [ "$(whoami)" != root ]; then
        messageError 'Must be root to do this.'
        exit 1
    fi
}

deleteAndSyncDirectory() {
    checkParamNum $# 2 2 || exit 1
    local srcDir="${1}"
    # Append "/" to srcDir if there isn't one already.
    if ! echo "${srcDir}" | grep -qP '/$'; then
        srcDir="${srcDir}/"
    fi
    local dstDir="${2}"

    rsync -Puza --delete-after "${srcDir}" "${dstDir}"
}

# Copies contents of the directory specified as first argument into
# second argument.
installDirectoryContents() {
    checkParamNum $# 2 2 || exit 1
    local srcDir="${1}"
    # Append "/" to srcDir if there isn't one already.
    if ! echo "${srcDir}" | grep -qP '/$'; then
        srcDir="${srcDir}/"
    fi
    local dstDir="${2}"

    rsync -Puza "${srcDir}" "${dstDir}"
}

# Finds regular files in a directory, and sets the files
# as an array in a variable.
# PARAMS:
# 1 : output variable name.
# 2 : directory.
findRegularFilesInDir() {
    checkParamNum $# 2 || exit 1
    local outVar="${1}"
    local dir="${2}"

    local oldIfs="${IFS}"
    local IFS=$'\n'
    local files=($(find "${dir}" -type f -print))
    local IFS="${oldIfs}"

    eval "${outVar}"="($(printf '%q ' "${files[@]}"))"
}

# Asserts that given file ends with the .wav extension, otherwise
# prints a message and sets $# to a nonzero value.
assertWavFile() {
    checkParamNum $# 1 || exit 1
    local filename="${1}"
    if ! echo "${filename}" | grep -qP '\.wav$'; then
        messageError "File \"${filename}\" does not end with the .wav extension"
        false
    fi
}

# Asserts that given file is an existing directory, otherwise
# prints a message and sets $# to a nonzero value.
assertDir() {
    checkParamNum $# 1 || exit 1
    local file="${1}"
    if [ ! -d "${file}" ]; then
        messageError "File \"${file}\" is not an existing directory."
    fi
}

# Recursively places all .wav files to another directory,
# converting it to several formats.
# PARAMS:
# 1 : Directory (or .wav file) to install.
# 2 : Directory where to install. Must exist and be a directory.
# 3 : Formats to convert the .wav file to. Example: "wav|gsm|alaw".
#     Default: "wav|gsm|alaw|ulaw".
installWavSoundFiles() {
    checkParamNum $# 2 3 || exit 1
    local src="${1}"
    local dst="${2}"
    if [ $# -ge 3 ]; then
        local formatsString="${3}"
    else
        local formatsString='wav|gsm|ulaw|alaw'
    fi

    # Assert destination is a directory
    if [ ! -d "${dst}" ]; then
        messageError "Destination ${dst} is not an existing directory."
        exit 1
    fi

    local oldIfs="${IFS}"
    local IFS='|'
    local formats=(${formatsString})
    local IFS="${oldIfs}"
    local wavFiles="$(find "${src}" -type f -name '*.wav' -print)"

    # Convert each format to lower case.
    local i
    for ((i=0; i < "${#formats[@]}"; ++i)); do
        formats["${i}"]="$(echo "${formats[${i}]}" | awk '{print tolower($0)}')"
    done
    # Assert format list is not empty.
    if [ "${#formats[@]}" -eq 0 ]; then
        messageError "No format specified to convert WAV file."
        exit 1
    fi

    # Create destination files
    local oldIfs="${IFS}"
    local IFS=$'\n'
    local wavFiles=($(find "${src}" -type f -name '*.wav' -print))
    local IFS="${oldIfs}"
    for wavFile in "${wavFiles[@]}"; do
        local relDst="${dst}/$(dirname "$(realpath --relative-to="${src}" "${wavFile}")")"
        mkdir -p "${relDst}"
        # Remove existing sound files so we don't leave any sound file of a
        # certain format when we remove it.
        find "${relDst}" -type f -name "$(basename "${wavFile}" .wav)*" -delete
        for format in "${formats[@]}"; do
            case "${format}" in
            wav)
                cp "${wavFile}" "${relDst}"
                ;;

            gsm)
                wavToGsm "${wavFile}" "${relDst}"
                ;;

            ulaw)
                wavToUlaw "${wavFile}" "${relDst}"
                ;;

            alaw)
                wavToAlaw "${wavFile}" "${relDst}"
                ;;

            *)
                messageError "Don't know how to convert WAV file \"${wavFile}\" to format \"${format}\"."
                ;;
            esac
        done
    done
}

# Converts WAV file specified as first argument to GSM format.
# GSM file will be available under the same name, but with a .gsm
# extension, rather than .wav.
# PARAMS:
# 1 : WAV file
# 2 : Destination directory of the GSM file. Default: directory of the
#     WAV file.
wavToGsm() {
    checkParamNum $# 1 2 || exit 1
    local wavFile="${1}"
    if [ $# -ge 2 ]; then
        local dstDir="${2}"
    else
        local dstDir="$(dirname "${wavFile}")"
    fi
    assertWavFile "${wavFile}"
    assertDir "${dstDir}"

    local dstFile="${dstDir}/$(basename "${wavFile}" .wav).gsm"
    ffmpeg -y -i "${wavFile}" -c:a libgsm -ar 8000 -ab 13000 -ac 1 -f gsm "${dstFile}" >/dev/null 2>&1
}

# Converts WAV file specified as first argument to GSM format.
# GSM file will be available under the same name, but with a .gsm
# extension, rather than .wav.
# PARAMS:
# 1 : WAV file
# 2 : Destination directory of the GSM file. Default: directory of the
#     WAV file.
wavToUlaw() {
    checkParamNum $# 1 2 || exit 1
    local wavFile="${1}"
    if [ $# -ge 2 ]; then
        local dstDir="${2}"
    else
        local dstDir="$(dirname "${wavFile}")"
    fi
    assertWavFile "${wavFile}"
    assertDir "${dstDir}"

    local dstFile="${dstDir}/$(basename "${wavFile}" .wav).ulaw"
    ffmpeg -y -i "${wavFile}" -af "highpass=f=300, lowpass=f=3400" -ar 8000 -ac 1 -ab 64k -f mulaw "${dstFile}" >/dev/null 2>&1
}

# Converts WAV file specified as first argument to GSM format.
# GSM file will be available under the same name, but with a .gsm
# extension, rather than .wav.
# PARAMS:
# 1 : WAV file
# 2 : Destination directory of the GSM file. Default: directory of the
#     WAV file.
wavToAlaw() {
    checkParamNum $# 1 2 || exit 1
    local wavFile="${1}"
    if [ $# -ge 2 ]; then
        local dstDir="${2}"
    else
        local dstDir="$(dirname "${wavFile}")"
    fi
    assertWavFile "${wavFile}"
    assertDir "${dstDir}"

    local dstFile="${dstDir}/$(basename "${wavFile}" .wav).alaw"
    ffmpeg -y -i "${wavFile}" -af "highpass=f=300, lowpass=f=3400" -ar 8000 -ac 1 -ab 64k -f alaw "${dstFile}" >/dev/null 2>&1
}
