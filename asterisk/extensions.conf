[globals]
; Main extension
MAIN_EXTEN = @MAIN_EXTEN@
; Extension to check voicemail messages
VOICEMAIL_MAIN_EXTEN = *${MAIN_EXTEN}
; Extension to leave voicemail messages
VOICEMAIL_EXTEN = **${MAIN_EXTEN}
; List of devices that get called when calling the main extension
DEVICE_LIST = @DEVICE_LIST@
; Dial time before going to voicemail
DIAL_TIME_SEC = @DIAL_TIME_SEC@
; ID of the voicemail of MAIN_EXTEN
VOICEMAIL_ID=${MAIN_EXTEN}

; Bash scripts (in /var/lib/asterisk if relative).
SMS_RECEIVED_SCRIPT=sms/on-sms-received.sh

; ---------------
; Voip.ms account
; ---------------
CALLER_NAME = @CALLER_NAME@
DID_NUMBERS = @DID_NUMBERS@
DID_NUMBER_SMS = $[${CUT(DID_NUMBERS,\,,1)}]
VOIPMS_ACCOUNT_ID = @VOIPMS_ACCOUNT_ID@
VOIPMS_SERVER = @VOIPMS_SERVER@

; --------------------
; Behavioral variables
; --------------------
; Format: https://www.voip-info.org/asterisk-cmd-gotoiftime/
CALL_ACCEPT_TIME_RANGE=@CALL_ACCEPT_TIME_RANGE@

; ==============================================
; =                 SUBROUTINES                =
; ==============================================

; Returns 1 if endpoint is present, 0 if it is not or
; does not exist.
[isDevicePresent]
exten => s,1,Set(DEVICE=${ARG1})
same  => n,Return(${REGEX("UNKNOWN|NOT_INUSE|INUSE|BUSY|RINGING|RINGINUSE|ONHOLD","${DEVICE_STATE(${DEVICE})}")})

; Returns 1 if current time matches acceptance time, 0 otherwise.
[isValidTimeToCall]
exten => s,1,Return(${IFTIME(${CALL_ACCEPT_TIME_RANGE}?1:0)})

[generateDialString]
exten => s,1,Set(exten_list=${DEVICE_LIST})
same  => n,Set(dialString=)
same  => n,While($["${SET(exten=${SHIFT(exten_list)})}" != ""])
	; Do not even try to dial if the device is not present.
	same  => n,Gosub(isDevicePresent,s,1(${exten}))
	same  => n,GotoIf($[!${GOSUB_RETVAL}]?loop-end)
	same  => n,Set(dialString=${dialString}&${exten})
same  => n(loop-end),EndWhile()
same  => n,Set(dialString=${dialString:1})
same  => n,Return(${dialString})

[sendSmsToEndpoints]
exten => s,1,NoOp(Sending SMS messages to all extensions...)
same  => n,Set(exten_list=${DEVICE_LIST})
same  => n,Set(received_by=)
; Loop on all extensions
same  => n,While($["${SET(exten=${SHIFT(exten_list)})}" != ""])
	same  => n,Set(chan=${CUT(exten,/,1)})
	same  => n,Set(endpoint=${CUT(exten,/,2)})
	; If device is not present, do not even try to send
	; the message.
	same  => n,Gosub(isDevicePresent,s,1(${exten}))
	same  => n,GotoIf($[!${GOSUB_RETVAL}]?loop-end)
	; Try to send the message
	same  => n,MessageSend(${TOLOWER(${chan})}:${endpoint}@${HOST_TO},${ACTUAL_FROM})
	same  => n,NoOp(${MESSAGE_SEND_STATUS})
	same  => n,GotoIf($["${MESSAGE_SEND_STATUS}" != "SUCCESS"]?loop-end)
	; If the message was not sent or the device is not present,
	; the message was not received.
	same  => n,Set(received_by=${received_by},${chan}/${endpoint})
same  => n(loop-end),EndWhile()
same  => n,Set(received_by=${received_by:1})
; Finally, return the list of devices that received the
; message.
same  => n,Return(${received_by})

; Dials all devices in DEVICE_LIST that are present.
[dialDevices]
exten => s,1,NoOp(Dialing devices...)
same  => n,Gosub(generateDialString,s,1)
same  => n,Set(dialString=${GOSUB_RETVAL})
same  => n,GotoIf($["${dialString}" == ""]?return)
same  => n,Dial(${dialString},${DIAL_TIME_SEC})
same  => n(return),Return()

; Prompts to leave a voicemail message at given voicemail. Uses the
; normal greeting.
[leaveVmMsgNormal]
exten => s,1,NoOp(Leaving voicemail message with normal greeting...)
same  => n,Set(VM_EXTEN="${ARG1}")
same  => n,Playback(my-normal-greeting)
same  => n,VoiceMail(${VM_EXTEN},u|s)
same  => n,Return()

; Prompts to leave a voicemail message at given voicemail. Uses the
; closed/night greeting.
[leaveVmMsgClosed]
exten => s,1,NoOp(Leaving voicemail message with closed greeting...)
same  => n,Set(VM_EXTEN="${ARG1}")
same  => n,Playback(my-night-greeting)
same  => n,VoiceMail(${VM_EXTEN},u|s)
same  => n,Return()

; Dials all devices in DEVICE_LIST that are present if
; the current time matches CALL_ACCEPT_TIME_RANGE. Prompts
; to leave a voicemail message (using the crrect greeting)
; if necessary.
[dialDevicesOrLeaveVoicemailMessage]
exten => s,1,Gosub(isValidTimeToCall,s,1)
same  => n,GotoIf($[${GOSUB_RETVAL} == 0]?invalid-time)

; Time is valid ; actually dial
same  => n,Gosub(dialDevices,s,1)
; If we get here, it's because the Dial application returned, which
; means it finished with a BUSY, NOANSWER etc. status.
same  => n,Gosub(leaveVmMsgNormal,s,1(${VOICEMAIL_ID}))
same  => n,Goto(return)

; Time not accepted for call ; go to voicemail
same  => n(invalid-time),Gosub(leaveVmMsgClosed,s,1(${VOICEMAIL_ID}))

same  => n(return),Return()

; Determines whether the first argument is in the list of the second argument.
; Returns 1 if so, 0 otherwise.
[isInList]
exten => s,1,Set(STR=${ARG1})
same  => n,Set(LIST=${ARG2:1:-1})
same  => n,Set(same=0)
same  => n,While($["${SET(elem=${SHIFT(LIST)})}" != ""])
	same  => n,Set(same=$["${elem}" == "${STR}"])
	same  => n,GotoIf($["${same}" == "1"]?return)
same  => n(loop-end),EndWhile()
same  => n(return),Return(${same})

; Determines, given a list of strings that are different, the minimum prefixes
; of these substrings that allows distinguishing each of them, and returns a
; list that contains these distinguishing prefixes. All returned prefixes are
; the same length.
;
; This does not support cases where some strings in the list are prefixes of
; other strings in that list.
;
; Example:
; 1,2,3          -> 1,2,3
; 1234,5678,9012 -> 1,5,9
; 1234,1256,7890 -> 123,125,789
[findMinDistinguishingPrefixes]
exten => s,1,NoOp(findMinDistinguishingPrefixes was called)
same  => n,Set(IN_LIST=${ARG1:1:-1})
same  => n,Set(length=0)
same  => n,Set(length_ok=0)
same  => n,While($[!${length_ok}])
	same  => n,Set(length=$[${length}+1])
	same  => n,Set(prefix_list=)
	same  => n,Set(length_ok=1)
	; I don't know how to traverse a list without consuming it, so let's just
	; create a copy of the list and consume that copy instead... Ugh. I really
	; wish this whole dialplan thing could be done in Python or another
	; mainstream language. This is so bad that I'd even settle for TCL at this
	; point haha!
	same  => n,Set(IN_LIST_LOOP1=${IN_LIST})
	same  => n,While($["${SET(str=${SHIFT(IN_LIST_LOOP1)})}" != "" && ${length_ok}])
		same  => n,Set(prefix=${str:0:${length}})
		same  => n,GoSub(isInList,s,1(${prefix},"${prefix_list}"))
		same  => n,Set(length_ok=$[!${GOSUB_RETVAL}])
		same  => n,Set(prefix_list=${prefix_list},${prefix})
		; For the first element, we added a comma at the beginning of the list
		; without anything preceding it. This removes it.
		same  => n,GotoIf($["${prefix_list:0:1}" != ","]?loop2-end)
		same  => n,Set(prefix_list=${prefix_list:1})
	same  => n(loop2-end),EndWhile()
same  => n(loop1-end),EndWhile()
same  => n,Return(${prefix_list})

; ==============================================
; =                  DIALPLAN                  =
; ==============================================

[test-do-substr]
exten => s,1,NoOp(dosubstr)
same  => n,GoSub(findMinDistinguishingPrefixes,s,1("${DID_NUMBERS}"))
same  => n,Set(prefixes=${GOSUB_RETVAL})
same  => n,Hangup()

[test-ivr-prompt]
exten => s,1,NoOp(Doing test IVR prompt, BTW DID_NUMBER_SMS is "${DID_NUMBER_SMS}")
same  => n,Answer()
same  => n,WaitExten(5)

exten => 1,1,NoOp(1)
same  => n,Playback(tt-monkeys)
same  => n,Hangup()

exten => 10,1,NoOp(10)
same  => n,Playback(tt-weasels)
same  => n,Hangup()

exten => t,1,Playback(vm-unknown-caller)
same  => n,Hangup()

exten => i,1,Playback(vm-Urgent)
same  => n,Hangup()

[test-say-anthony]
exten => s,1,NoOp(Saying 0123456789)
same  => n,Set(CHANNEL(language=en-anthonyd))
same  => n,SayDigits(0123456789)
same  => n,Playback(specify-number)
same  => n,Playback(or)

[phones]
; Test if trying to send text message between extensions, and, if so,
; jump to appropriate context.
exten => ${MAIN_EXTEN},1,GotoIf($["${MESSAGE(to)}" != ""]?sms-in,fromPeer,1)
same  => n,Gosub(dialDevicesOrLeaveVoicemailMessage,s,1)
same  => n,Hangup()

exten => ${VOICEMAIL_MAIN_EXTEN},1,VoiceMailMain(${VOICEMAIL_ID})
same  => n,Hangup()

exten => ${VOICEMAIL_EXTEN},1,Gosub(leaveVmMsgNormal,s,1(${VOICEMAIL_ID}))
same  => n,Hangup()

exten => 1234,1,Gosub(test-ivr-prompt,s,1)
exten => 1235,1,Gosub(test-do-substr,s,1)
exten => 1236,1,GoSub(test-say-anthony,s,1)

include => voipms-inbound
include => voipms-outbound

[voipms-inbound]
; Voip.MS uses extension "s" when sending
; us an SMS.
exten => s,1,Goto(sms-in,${MAIN_EXTEN},1)

exten => voipms,1,GotoIf($["${MESSAGE(from)" != ""]?sms-in,${MAIN_EXTEN},1)
same  => n,Goto(phones,${MAIN_EXTEN},1)

[voipms-outbound]
exten => _1NXXNXXXXXX,1,Set(CALLERID(all)="${CALLER_NAME}" <${DID_NUMBER}>)
; Test if instant message, and, if so, jump to appropriate context.
same  => n,GotoIf($["${MESSAGE(to)}" != ""]?sms-out,${EXTEN:1},1)
same  => n,Dial(PJSIP/${EXTEN}@voipms)
same  => n,Hangup()

exten => _NXXNXXXXXX,1,Goto(voipms-outbound,1${EXTEN},1)

exten => _011.,1,Dial(PJSIP/${EXTEN}@voipms)
same  => n,Hangup()

exten => _00.,1,Dial(PJSIP/${EXTEN}@voipms)
same  => n,Hangup()

[sms-out]
exten => _NXXNXXXXXX,1,NoOp(Outbound Message dialplan invoked)
same  => n,Set(CALLERID(name)=${DID_NUMBER})
same  => n,NoOp(To ${MESSAGE(to)})
same  => n,NoOp(From ${MESSAGE(from)})
same  => n,NoOp(Body ${MESSAGE(body)})
same  => n,Set(NUMBER_FROM=${CUT(CUT(MESSAGE(from),@,1),:,2)})
same  => n,Set(NUMBER_TO=${CUT(CUT(MESSAGE(to),@,1),:,2)})
same  => n,Set(ACTUAL_FROM="${DID_NUMBER}" <sip:${VOIPMS_ACCOUNT_ID}@${VOIPMS_SERVER}>)
same  => n,Set(ACTUAL_TO=pjsip:voipms/sip:${NUMBER_TO}@${VOIPMS_SERVER}>)
same  => n,MessageSend(${ACTUAL_TO},${ACTUAL_FROM})
same  => n,NoOp(Send status is ${MESSAGE_SEND_STATUS})
same  => n,Hangup()

[sms-in]
exten => fromPeer,1,NoOp(Inbound SMS from peer)
same  => n,Set(CALLERID(all)="" <${MAIN_EXTEN}>)
same  => n,Set(NUMBER_TO=${MAIN_EXTEN})
same  => n,Set(MESSAGE(from)=${MAIN_EXTEN})
same  => n,Set(ACTUAL_FROM=${MAIN_EXTEN})
same  => n,Goto(sms-in,general,1)

exten => _X!,1,NoOp(Inbound SMS dialplan invoked)
same  => n,Set(ACTUAL_FROM=${MESSAGE(from)})
same  => n,Set(NUMBER_TO=${EXTEN})
same  => n,Goto(sms-in,general,1)

exten => general,1,NoOp(General SMS extension)
same  => n,Set(HOST_TO=${CUT(MESSAGE(to),@,2)})
same  => n,Gosub(sendSmsToEndpoints,s,1)
same  => n,Set(receivedBy=${GOSUB_RETVAL})
; Call script to write SMS and metadata to file.
same  => n,Set(smsFile=${SHELL(${SMS_RECEIVED_SCRIPT} ${QUOTE(${NUMBER_TO})} ${QUOTE(${CALLERID(name)})} ${QUOTE(${CALLERID(num)})} ${QUOTE(${receivedBy})} ${QUOTE(${MESSAGE(body)})})})
same  => n,UserEvent(SmsReceived,ExtenTo:"${NUMBER_TO}",File:"${smsFile}")
same  => n,Hangup()
